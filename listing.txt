     1                                  default		rel
     2                                  
     3                                  global		int_to_hex_str:function
     4                                  
     5                                  section 	.text
     6                                  
     7                                  BUFFER_SIZE	equ	32
     8                                  BUFFER_END	equ	ConversionBuf+BUFFER_SIZE-1
     9                                  
    10                                  ;====================================================================================================
    11                                  ; Converts given integer value to hex representation and stores it in given buffer. If buffer size
    12                                  ; is not enough to contain hex representation, returns -1, otherwise returns 0
    13                                  ;====================================================================================================
    14                                  ; Entry:	EDI		input integer
    15                                  ;		RSI		buffer address
    16                                  ;		RDX		buffer size
    17                                  ; Exit:		EAX		-1 upon failure, 0 otherwise
    18                                  ; Destroys:	RCX, EDI
    19                                  ;====================================================================================================
    20 00000000 4831C9                  int_to_hex_str:	xor			rcx,			rcx
    21                                  
    22 00000003 4C8D05(1F000000)        		lea			r8,			[ConversionBuf+BUFFER_SIZE-1]
    23 0000000A 4C8D0D(00000000)        		lea			r9,			[HexDigits]
    24                                  
    25 00000011 89F8                    .div_loop:	mov			eax,			edi
    26 00000013 83E00F                  		and			eax,			0x0F		; Only last nibble
    27 00000016 8B80[00000000]          		mov DWORD		eax,			[HexDigits+rax]	; Get hexadecimal digit
    28 0000001C 418800                  		mov BYTE		[r8],			al
    29                                  
    30 0000001F 48FFC1                  		inc			rcx					; Increase counter
    31 00000022 49FFC8                  		dec			r8					; Decrease address
    32                                  
    33 00000025 D1EF                    		shr			edi,			1		; Divide by 16
    34 00000027 75E8                    		jnz			.div_loop
    35                                  
    36 00000029 49FFC0                  		inc			r8					; r8 points to first character
    37                                  
    38 0000002C 4889C8                  		mov			rax,			rcx
    39 0000002F 48FFC0                  		inc			rax
    40 00000032 4839C2                  		cmp			rdx,			rax		; rdx < rcx + 1 ?
    41 00000035 7306                    		jae			.copy_loop
    42                                  
    43 00000037 B8FFFFFFFF              		mov			eax,			-1		; Buffer too small
    44 0000003C C3                      		ret
    45                                  
    46 0000003D 418A00                  .copy_loop:	mov BYTE		al,			[r8]
    47 00000040 8806                    		mov BYTE		[rsi],			al
    48                                  										
    49 00000042 48FFC6                  		inc			rsi					; Increase both destination (rsi)
    50 00000045 49FFC0                  		inc			r8					; 	and source (r8) pointers
    51                                  
    52 00000048 E2F3                    		loop			.copy_loop				; Continue copying
    53                                  
    54 0000004A C60600                  		mov BYTE		[rsi],			0		; NUL-terminator
    55                                  		
    56 0000004D 31C0                    		xor			eax,			eax
    57 0000004F C3                      		ret
    58                                  ;====================================================================================================
    59                                  		
    60                                  section		.rodata
    61 00000000 303132333435363738-     HexDigits:	db '0123456789ABCDEF'
    61 00000009 39414243444546     
    62                                  
    63                                  section		.bss
    64 00000000 <res 00000020>          ConversionBuf:	resb	BUFFER_SIZE
    65                                  
